
spring:
#  main:
#    allow-circular-references: true
  config:
    import: optional:file:.env[.properties]
#  datasource:
#    driverClassName: com.mysql.cj.jdbc.Driver
#    url: jdbc:mysql://localhost:3306/magnet
#    username: root
#    password: root

  datasource:
    driverClassName: org.sqlite.JDBC
    url: jdbc:sqlite:magnet.db
    username:
    password:

#  datasource:
#    driverClassName: com.mysql.cj.jdbc.Driver
#    url: ${MYSQL_URL}
#    username: ${MYSQL_USER}
#    password: ${MYSQL_PASSWORD}

#  datasource:
#    driverClassName: org.postgresql.Driver
#    url: jdbc:postgresql://postgres:5432/magnet?currentSchema=public
#    username: itireland
#    password: 123456

  jpa:
    hibernate.ddl-auto: update
    generate-ddl: true
    show-sql: true
    jackson:
      time-zone: Europe/Dublin
    properties:
      hibernate:
        format_sql: true
#    database-platform: org.hibernate.dialect.MySQLDialect
    database-platform: org.hibernate.community.dialect.SQLiteDialect
  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 5MB
  codec:
    max-in-memory-size: 5MB

server:
  error:
    include-message: always # Return Customized Exception Message to Client
  port: 8081

cors:
  allowed-origins: "*"
  allowed-methods: "*"
  allowed-headers: "*"
  exposed-headers: "*"

openapi:
  service:
    title: Magnet doc
    version: 1.0.0
#    url: https://magnet-203dcc8b7d54.herokuapp.com/
    url: http://localhost:8081/
springdoc:
  api-docs:
    path: /api/v3/api-docs
  swagger-ui:
    path: /swagger-ui.html


security:
  secret_key: ${SECURITY_SECRET_KEY}

aws:
  region: eu-west-1
  s3:
    mock: true
    buckets:
      images: elasticbeanstalk-eu-west-1-845708981828

external:
  apilayer:
    key: ${RESUME_PARSER_API_KEY}
    resume_parser:
      url: https://api.apilayer.com/resume_parser/upload
    skills:
      url: https://api.apilayer.com/skills
  countries:
    url: https://restcountries.com/v3.1/all?fields=name
  cities:
    url: https://countriesnow.space/api/v0.1/countries/cities


langchain4j:
  chat-model:
    provider: openai
#    provider: huggingface
    openai:
      url: https://openkey.cloud
      api-key: ${OPEN_AI_API_KEY}
#      api-key: adf
      model-name: gpt-3.5-turbo
#      model-name: gpt-4
      temperature: 0.0
#      top-p: 1.0
#      max-tokens: 100
#      presence-penalty: 0.0
#      frequency-penalty: 0.0
      timeout: PT300S
#      max-retries: 3
#      log-requests: true
#      log-responses: true
    huggingface:
      access-token: ${HUGGINGFACE_ACCESS_TOKEN}
#      access-token: adfsdf
      model-name: mistralai/Mistral-7B-v0.1
#      temperature: 0.0
#      timeout: PT60S


logging:
  level:
    web: debug
    dev:
      langchain4j: debug
      ai4j:
        openai4j: DEBUG
